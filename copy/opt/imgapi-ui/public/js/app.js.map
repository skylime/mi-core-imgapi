{"version":3,"sources":["app/js/app.js","app/js/controllers.js","app/js/directives.js","app/js/filters.js","app/js/models.js","app/js/services.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"public/js/app.js","sourcesContent":["'use strict';\n\nangular.module('dsapi', [ 'ngRoute', 'dsapi.services', 'dsapi.directives', 'dsapi.bootstrap', 'dsapi.filters' ])\n  .config(['$locationProvider', '$routeProvider', function($location, $routeProvider) {\n    $location.hashPrefix('!');\n\n    $routeProvider.when('/home', { templateUrl: 'views/home.html', controller: HomeCtrl });\n    $routeProvider.when('/configure/search/:query', { templateUrl: 'views/configure.html', controller: HomeCtrl });\n    $routeProvider.when('/configure', { templateUrl: 'views/configure.html', controller: HomeCtrl });\n    $routeProvider.when('/configure/:uuid', { templateUrl: 'views/builder/index.html', controller: BuilderCtrl });\n    $routeProvider.when('/about', { templateUrl: 'views/about.html', controller: HomeCtrl });\n\n    $routeProvider.otherwise({redirectTo: '/home'});\n  }]);\n","'use strict';\n\nfunction HomeCtrl($scope, $routeParams, $location, dsapiDatasets) {\n  $scope.datasets = null;\n  $scope.latest = null;\n\n  if ($routeParams.query) {\n    $scope.query = $routeParams.query;\n  }\n\n  dsapiDatasets.then(function(instance) {\n    $scope.datasets = instance.all();\n    $scope.latest = instance.latest();\n  });\n\n  $scope.editManifest = function(uuid) {\n    $location.path('/configure/' + uuid);\n  };\n}\n\nHomeCtrl.$inject = [ '$scope', '$routeParams', '$location', 'dsapiDatasets' ];\n\nfunction BuilderCtrl($scope, $routeParams, dsapiDatasets) {\n  $scope.dataset = null;\n  $scope.form = { // all form field will flow in here\n    'settings': {},\n    'nics': [],\n    'disks': [],\n    'filesystems': [],\n    'metadata': [],\n    '_selected_metadata': null\n  };\n  $scope.temp; // temporary data flows in here\n\n  function clearObject(object) {\n    for (prop in object) {\n      if (object.hasOwnProperty(prop)) {\n        delete object[prop];\n      }\n    }\n\n    return object;\n  }\n\n  function loadBuilderDefaults(options) {\n    for (k in options) {\n      $scope.form.settings[k] = options[k];\n    }\n  }\n\n  $scope.addNic = function() {\n    clearObject($scope.temp);\n\n    $scope.temp = {\n      nic_tag: 'admin'\n    };\n\n    if ($scope.isKVM()) {\n      $scope.temp.model = ($scope.dataset.nic_driver ? $scope.dataset.nic_driver : $scope.valid_nic_models[0]);\n    }\n  }\n\n  $scope.editNic = function(data) {\n    var nic = {};\n\n    angular.copy(data, nic);\n    nic._target = data;\n\n    $scope.temp = nic;\n  };\n\n  $scope.saveNic = function(data) {\n    var nic = {};\n\n    angular.copy(data, nic);\n\n    if (nic.primary === true) {\n      var i, len;\n\n      for (i = 0, len = $scope.form.nics.length; i < len; i++) {\n        $scope.form.nics[i].primary = false;\n      }\n    }\n\n    if (Object.keys(nic).length > 0 && nic.nic_tag && nic.ip) {\n      if (data._target) {\n        delete nic._target;\n\n        angular.copy(nic, data._target);\n      } else {\n        $scope.form.nics.push(nic);\n      }\n    }\n\n    clearObject($scope.temp);\n  };\n\n  $scope.removeNic = function(data) {\n    var index = $scope.form.nics.indexOf(data);\n\n    if (index >= 0) {\n      $scope.form.nics.splice(index, 1);\n    }\n  };\n\n  $scope.addFilesystem = function() {\n    clearObject($scope.temp);\n\n    $scope.temp = {\n      type: $scope.valid_filesystem_types[0]\n    };\n  };\n\n  $scope.editFilesystem = function(data) {\n    var fs = {};\n\n    angular.copy(data, fs);\n    fs._target = data;\n\n    $scope.temp = fs;\n  };\n\n  $scope.saveFilesystem = function(data) {\n    var fs = {};\n\n    angular.copy(data, fs);\n\n    if (Object.keys(fs).length > 0 && fs.type && fs.source && fs.target) {\n      if (data._target) {\n        delete fs._target;\n\n        angular.copy(fs, data._target);\n      } else {\n        $scope.form.filesystems.push(fs);\n      }\n    }\n\n    clearObject($scope.temp);\n  }\n\n  $scope.removeFilesystem = function(data) {\n    var index = $scope.form.filesystems.indexOf(data);\n\n    if (index >= 0) {\n      $scope.form.filesystems.splice(index, 1);\n    }\n  };\n\n  $scope.addDisk = function() {\n    clearObject($scope.temp);\n\n    $scope.temp = {\n      model: ($scope.dataset.disk_driver ? $scope.dataset.disk_driver : $scope.valid_disk_models[0]),\n      compression: $scope.valid_disk_compressions[0].type\n    };\n  };\n\n  $scope.editDisk = function(data) {\n    var disk = {};\n\n    angular.copy(data, disk);\n    disk._target = data;\n\n    $scope.temp = disk;\n  };\n\n  $scope.saveDisk = function(data) {\n    var disk = {};\n\n    angular.copy(data, disk);\n\n    if (Object.keys(disk).length > 0 && disk.model && disk.size) {\n      if (data._target) {\n        delete disk._target;\n\n        angular.copy(disk, data._target);\n      } else {\n        $scope.form.disks.push(disk);\n      }\n    }\n\n    clearObject($scope.temp);\n  }\n\n  $scope.removeDisk = function(data) {\n    var index = $scope.form.disks.indexOf(data);\n\n    if (index >= 0) {\n      $scope.form.disks.splice(index, 1);\n    }\n  };\n\n  $scope.addMetadata = function(data) {\n    var md = {};\n\n    clearObject($scope.temp);\n\n    if (!data) {\n      data = {\n        name: '',\n        type: 'custom',\n        value: '',\n        description: 'custom key'\n      };\n    } else {\n      if (data.type === 'password') {\n        data.initWithRandom(24);\n      }\n    }\n\n    angular.copy(data, md);\n\n    $scope.temp = md;\n  };\n\n  $scope.editMetadata = function(data) {\n    var md = {};\n\n    angular.copy(data, md);\n    md._target = data;\n\n    $scope.temp = md;\n  };\n\n  $scope.saveMetadata = function(data) {\n    var metadata = {};\n\n    angular.copy(data, metadata);\n\n    if (Object.keys(metadata).length > 0 && metadata.name && metadata.value) {\n      if (metadata.type === 'custom') {\n        metadata.title = metadata.name;\n      }\n\n      if (data._target) {\n        delete metadata._target;\n\n        angular.copy(metadata, data._target);\n      } else {\n        $scope.form.metadata.push(metadata);\n      }\n    }\n\n    clearObject($scope.temp);\n    $scope.form._selected_metadata = null;\n  }\n\n  $scope.removeMetadata = function(data) {\n    var index = $scope.form.metadata.indexOf(data);\n\n    if (index >= 0) {\n      $scope.form.metadata.splice(index, 1);\n    }\n  };\n\n  $scope.json = {};\n  $scope.json_pretty = '';\n\n  $scope.generateJson = function() {\n    var generator = $scope.dataset.getGenerator();\n\n    generator.setOptions($scope.form.settings);\n\n    generator.setNics($scope.form.nics);\n    generator.setFilesystems($scope.form.filesystems);\n    generator.setDisks($scope.form.disks);\n    generator.setMetadata($scope.form.metadata);\n\n    $scope.json = generator.generate();\n\n    $scope.changeOutput('json');\n  };\n\n  $scope.changeOutput = function(type) {\n    if (type === 'shell') {\n      $scope.json_pretty = [\n        'vmadm create << EOF',\n        JSON.stringify($scope.json, null, 2),\n        'EOF'\n      ].join(\"\\n\");\n    } else {\n      $scope.json_pretty = [\n        JSON.stringify($scope.json, null, 2)\n      ].join(\"\\n\");\n    }\n  }\n\n  $scope.isJoyent = function() {\n    return $scope.dataset &&\n      ($scope.dataset.getBrand() === 'joyent' ||\n        $scope.dataset.getBrand() === 'joyent-minimal');\n  };\n\n  $scope.isKVM = function() {\n    return $scope.dataset && $scope.dataset.getBrand() === 'kvm';\n  };\n\n  $scope.isLX = function() {\n    return $scope.dataset && $scope.dataset.getBrand() === 'lx';\n  };\n\n  dsapiDatasets.then(function(instance) {\n    $scope.dataset = instance.by_uuid($routeParams.uuid);\n\n    if ($scope.dataset.manifest.builder_info) {\n      loadBuilderDefaults($scope.dataset.manifest.builder_info);\n    }\n  });\n\n  $scope.valid_filesystem_types = ['lofs'];\n  $scope.valid_disk_models = ['virtio', 'ide', 'scsi'];\n  $scope.valid_disk_compressions = [\n    { type: 'off' },\n    { type: 'on' },\n    { type: 'lzjb' },\n    { type: 'gzip' },\n    { type: 'zle' },\n    { type: 'gzip-1', group: 'gzip' },\n    { type: 'gzip-2', group: 'gzip' },\n    { type: 'gzip-3', group: 'gzip' },\n    { type: 'gzip-4', group: 'gzip' },\n    { type: 'gzip-5', group: 'gzip' },\n    { type: 'gzip-6', group: 'gzip' },\n    { type: 'gzip-7', group: 'gzip' },\n    { type: 'gzip-8', group: 'gzip' },\n    { type: 'gzip-9', group: 'gzip' }\n  ];\n  $scope.valid_nic_models = ['virtio', 'e1000', 'rtl8139'];\n  $scope.valid_cpu_types = ['qemu64', 'host'];\n}\n\nBuilderCtrl.$inject = [ '$scope', '$routeParams', 'dsapiDatasets' ];\n","'use strict';\n\nangular.module('dsapi.directives', [])\n  .directive('dateFromNow', function() {\n    return function(scope, element, attrs) {\n      scope.$watch(attrs.dateFromNow, function(value) {\n        if (value && value > 0) {\n          element.text(moment(value).fromNow());\n        }\n      });\n    }\n  });\n\n/**\n * bootstrap directives\n */\nangular.module('dsapi.bootstrap', [])\n  .directive('navBarTop', function() {\n    return {\n      restrict: 'EC',\n      transclude: true,\n      scope: {\n        'title': '@'\n      },\n      template:\n        '<div class=\"navbar navbar-fixed-top\">' +\n          '<div class=\"navbar-inner\">' +\n            '<div class=\"container\">' +\n              '<a class=\"brand\" href=\"#!/\">{{title}}</a>' +\n              '<ul class=\"nav\" ng-transclude></ul>' +\n            '</div>' +\n          '</div>' +\n        '</div>',\n      replace: true\n    };\n  })\n\n  .directive('navBarPills', function() {\n    return {\n      restrict: 'EC',\n      transclude: true,\n      template:\n        '<ul class=\"nav nav-pills pull-right\" ng-transclude>' +\n        '</ul>',\n      replace: true\n    };\n  })\n\n  .directive('navLocation', ['$location', function($location) {\n    var match = function(href, url) {\n      var _slash = href.indexOf('/');\n\n      if (_slash > 0) {\n        href = href.substring(_slash, href.length - _slash + 1);\n      }\n\n      var href_a = href.split('/');\n      var url_a = url.split('/');\n      var i;\n\n      for (i in href_a) {\n        if (href_a[i] !== url_a[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return {\n      restrict: 'EC',\n      transclude: true,\n      scope: {\n        'href': '@'\n      },\n      link: function (scope) {\n        scope.location = function (href) {\n          return match(href.substr(1), $location.url());\n        };\n      },\n      template:\n        '<li ng-class=\"{active: location(href)}\">' +\n          '<a href=\"{{href}}\" ng-transclude></a>' +\n        '</li>',\n      replace: true\n    };\n  }]);\n","'use strict';\n\nangular.module('dsapi.filters', [])\n  .filter('shorten', function() {\n    return function(text, max_length) {\n      max_length = max_length || 0xffffffff;\n\n      if (text.length > max_length) {\n        text = text.substring(0, max_length) + '...';\n      }\n\n      return text;\n    };\n  })\n  .filter('searchDatasets', function() {\n    var searchableKeys = [\n      'name',\n      'version',\n      'os',\n      'description'\n    ];\n\n    var filterableKeys = [\n      'uuid',\n      'name',\n      'version',\n      'os',\n      'description'\n    ];\n\n    var matchManifest = function(manifest, query) {\n      if (!query) {\n        return true;\n      }\n\n      var k, i, parts, len, kv;\n\n      parts = query.toLowerCase().split(/\\s+/);\n\n      for (i = 0, len = parts.length; i < len; i++) {\n        var match = false;\n\n        kv = parts[i].match(/^(\\w+):(.+)$/);\n\n        if (kv && filterableKeys.indexOf(kv[1]) >= 0) {\n          if (manifest[kv[1]].toLowerCase().indexOf(kv[2].toLowerCase()) === 0) {\n            match = true;\n          }\n        } else {\n          for (k in searchableKeys) {\n            if (manifest[searchableKeys[k]].toLowerCase().search(parts[i]) >= 0) {\n              match = true;\n            }\n          }\n        }\n\n        if (!match) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return function(datasets, query) {\n      var i;\n      var matched = [];\n\n      if (!query) {\n        return datasets;\n      }\n\n      for (i in datasets) {\n        if (matchManifest(datasets[i], query)) {\n          matched.push(datasets[i]);\n        }\n      }\n\n      return matched;\n    }\n  });\n","'use strict';\n\nfunction MetadataOption(options) {\n  this.group = options.group || '';\n\n  this.name = options.name || '';\n  this.title = options.title || this.name;\n  this.description = options.description || '';\n\n  this.type = options.type || 'text';\n\n  this.value = options.value || '';\n\n  this.initWithRandom = function(length) {\n    length = length || 8;\n\n    function randomString(length) {\n      var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz';\n      var result = '';\n\n      while (result.length < length) {\n        result += chars.substr(Math.floor(Math.random() * chars.length), 1);\n      }\n\n      return result;\n    }\n\n    this.value = randomString(length);\n  };\n}\n\nfunction Dataset(data) {\n  this.manifest = data;\n  this.metadata = [];\n\n  var _generator = null;\n\n  this.getGenerator = function() {\n    if (_generator === null) {\n      _generator = new DatasetJsonGenerator(this);\n    }\n\n    return _generator;\n  };\n\n  this.getCreator = function() {\n    if (data.provider) {\n      return data.provider;\n    }\n\n    switch(data.creator_name) {\n      case 'sdc':\n      case 'jpc':\n        return 'joyent';\n      default:\n        return 'community';\n    }\n  };\n\n  this.getBrand = function() {\n    if (data.type === 'lx-dataset') {\n      return 'lx';\n    }\n\n    if (data.os !== 'smartos') {\n      return 'kvm';\n    }\n\n    return 'joyent';\n  };\n\n  this.getDownloadSize = function() {\n    var niceBytes = function (bytes) {\n      if (bytes == 0) return 'n/a';\n      var sizes = ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'],\n      i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\n      return Math.round(bytes / Math.pow(1024, i), 2) + sizes[i];\n    };\n\n    var download_size = 0;\n\n    for (var i = 0; i < data.files.length; i++) {\n      download_size += data.files[i].size;\n    }\n\n    return niceBytes(download_size);\n  };\n\n  var i, proxy_attrs = [\n    'name',\n    'version',\n    'os',\n    'description',\n    'homepage',\n    'uuid',\n    'published_at',\n    'stats_info'\n  ];\n\n  for (i in proxy_attrs) {\n    this[proxy_attrs[i]] = this.manifest[proxy_attrs[i]];\n  }\n\n  /* parse date data */\n  this.published_at = Date.parse(this.published_at);\n\n  /* determine usable metadata and populate metadata list */\n  this.metadata.push(new MetadataOption({\n    'name': 'user-script',\n    'title': 'User-Script',\n    'description': 'bash script to be run at first boot used to provision even more stuff automatically',\n    'type': 'text'\n  }));\n\n  this.metadata.push(new MetadataOption({\n    'name': 'user-data',\n    'title': 'User-Data',\n    'description': 'data that can be used by the user-script',\n    'type': 'text'\n  }));\n\n  if (this.getBrand() === 'kvm') {\n    if (this.manifest.hasOwnProperty('requirements') && this.manifest.requirements &&\n        this.manifest.requirements.hasOwnProperty('ssh_key') && this.manifest.requirements.ssh_key) {\n      this.metadata.push(new MetadataOption({\n        'group': 'password',\n        'title': 'SSH-PubKey',\n        'name': 'root_authorized_keys',\n        'type': 'text',\n        'description': 'sets authorized_keys for the root user'\n      }));\n    }\n  } else {\n    if (this.manifest.users) {\n      for (i in this.manifest.users) {\n        var user = this.manifest.users[i];\n\n        this.metadata.push(new MetadataOption({\n          'group': 'password',\n          'title': user.name,\n          'name': user.name + '_pw',\n          'type': 'password',\n          'description': 'sets the password for the user'\n        }));\n      }\n    } else {\n      if ([ 'smartos', 'smartos64',\n            'base', 'base64'].indexOf(this.manifest.name) >= 0\n          || this.manifest.os === 'smartos') {\n        this.metadata.push(new MetadataOption({\n          'group': 'password',\n          'title': 'root',\n          'name': 'root_pw',\n          'type': 'password',\n          'description': 'sets the password for the user'\n        }));\n\n        this.metadata.push(new MetadataOption({\n          'group': 'password',\n          'title': 'admin',\n          'name': 'admin_pw',\n          'type': 'password',\n          'description': 'sets the password for the user'\n        }));\n      }\n    }\n  }\n\n  if (this.manifest.hasOwnProperty('metadata_info')) {\n    var options;\n\n    for (i in this.manifest.metadata_info) {\n      options = this.manifest.metadata_info[i];\n\n      if (!options.hasOwnProperty('group')) {\n        options['group'] = 'custom';\n      }\n\n      this.metadata.push(new MetadataOption(options));\n    }\n  }\n}\n\nfunction DatasetList() {\n  var content = [];\n  var latest = [];\n\n  function updateLatest() {\n    var i, known = {};\n\n    latest.length = 0;\n\n    for (i in content) {\n      var creator = content[i].getCreator();\n      var key = [content[i].name, creator].join(':');\n\n      if (!known[key]) {\n        known[key] = true;\n\n        latest.push(content[i]);\n      }\n    }\n  }\n\n  this.clear = function() {\n    content.length = 0;\n    latest.length = 0;\n  }\n\n  this.count = function() {\n    return content.length;\n  }\n\n  this.push = function(ds, batch) {\n    if (ds.constructor !== Dataset) {\n      ds = new Dataset(ds);\n    }\n\n    content.push(ds);\n\n    if (batch) {\n      updateLatest();\n    }\n  }\n\n  this.pushMany = function(list) {\n    var i, len;\n    for (i = 0, len = list.length; i < len; i++) {\n      this.push(list[i], true);\n    }\n\n    updateLatest();\n  }\n\n  this.all = function() {\n    return content;\n  }\n\n  this.get = function(index) {\n    if (index >= 0 && index < content.length) {\n      return content[index];\n    }\n\n    return null;\n  }\n\n  this.get_by_uuid = function(uuid) {\n    var i, len, result = null;\n\n    for (i = 0, len = content.length; i < len; i++) {\n      if (content[i].uuid === uuid) {\n        result = content[i];\n      }\n    }\n\n    return result;\n  }\n\n  this.latest = function() {\n    return latest;\n  }\n\n  this.clear();\n}\n\nfunction DatasetJsonGenerator(dataset) {\n  var _dataset = dataset;\n\n  var _options = {};\n  var _nics = [];\n  var _filesystems = [];\n  var _disks = [];\n  var _metadata = [];\n\n  var brand = _dataset.getBrand();\n\n  /**\n   * normalize stuff a bit if we're consuming a api/datasets backend\n   */\n  if (_dataset.manifest.hasOwnProperty('options')) {\n    _dataset.manifest['cpu_type'] = _dataset.manifest['options']['cpu_type'];\n    _dataset.manifest['disk_driver'] = _dataset.manifest['options']['disk_driver'];\n    _dataset.manifest['nic_driver'] = _dataset.manifest['options']['nic_driver'];\n    _dataset.manifest['image_size'] = _dataset.manifest['options']['image_size'];\n  }\n\n  /**\n   * type: boolean|integer|string|array\n   */\n  var _json_option_rules = {\n    'image_uuid': [\n      'string',\n      function() {\n        return _dataset.uuid;\n      },\n      [ 'joyent', 'lx' ]\n    ],\n    'autoboot': [\n      'boolean',\n      true,\n      [ 'kvm', 'joyent', 'lx' ]\n    ],\n    'alias': [\n      'string',\n      null,\n      [ 'kvm', 'joyent', 'lx' ]\n    ],\n    'hostname': [\n      'string',\n      null,\n      [ 'kvm', 'joyent', 'lx' ]\n    ],\n    'delegate_dataset': [\n      'boolean',\n      null,\n      [ 'joyent' ]\n    ],\n    'dns_domain': [\n      'string',\n      null,\n      [ 'kvm', 'joyent', 'lx' ]\n    ],\n    'resolvers': [\n      'array',\n      null,\n      [ 'kvm', 'joyent', 'lx' ]\n    ],\n    'max_physical_memory': [\n      'integer',\n      function() {\n        if (_dataset.getBrand() === 'kvm') {\n          return null;\n        }\n\n        return 256;\n      },\n      [ 'joyent', 'lx' ]\n    ],\n    'max_swap': [\n      'integer',\n      function() {\n        var result;\n\n        if (_dataset.getBrand() === 'kvm') {\n          result = getOptionValue('ram');\n        } else {\n          result = getOptionValue('max_physical_memory');\n        }\n\n        return result;\n      },\n      [ 'joyent', 'lx' ]\n    ],\n    'tmpfs': [\n      'integer',\n      null,\n      [ 'joyent' ]\n    ],\n    'ram': [\n      'integer',\n      1024,\n      [ 'kvm' ]\n    ],\n    'quota': [\n      'integer',\n      null,\n      [ 'joyent', 'lx' ]\n    ],\n    'cpu_cap': [\n      'integer',\n      null,\n      [ 'kvm', 'joyent', 'lx' ]\n    ],\n    'cpu_shares': [\n      'integer',\n      null,\n      [ 'kvm', 'joyent', 'lx' ]\n    ],\n    'max_lwps': [\n      'integer',\n      null,\n      [ 'kvm', 'joyent', 'lx' ]\n    ],\n    'cpu_type': [\n      'string',\n      'qemu64',\n      [ 'kvm' ]\n    ],\n    'vcpus': [\n      'integer',\n      null,\n      [ 'kvm' ]\n    ]\n  };\n\n  var _json_nic_rules = {\n    'nic_tag': [\n      'string',\n      null,\n      [ 'kvm', 'joyent', 'lx' ]\n    ],\n    'mac': [\n      'string',\n      null,\n      [ 'kvm', 'joyent', 'lx' ]\n    ],\n    'ip': [\n      'string',\n      null,\n      [ 'kvm', 'joyent', 'lx' ]\n    ],\n    'netmask': [\n      'string',\n      null,\n      [ 'kvm', 'joyent', 'lx' ]\n    ],\n    'gateway': [\n      'string',\n      null,\n      [ 'kvm', 'joyent', 'lx' ]\n    ],\n    'model': [\n      'string',\n      null,\n      [ 'kvm' ]\n    ],\n    'vlan_id': [\n      'integer',\n      null,\n      [ 'kvm', 'joyent', 'lx' ]\n    ],\n    'primary': [\n      'boolean',\n      null,\n      [ 'kvm', 'joyent', 'lx' ]\n    ],\n    'allow_ip_spoofing': [\n      'boolean',\n      null,\n      [ 'kvm', 'joyent', 'lx' ]\n    ],\n    'allow_mac_spoofing': [\n      'boolean',\n      null,\n      [ 'kvm', 'joyent', 'lx' ]\n    ],\n    'allow_restricted_traffic': [\n      'boolean',\n      null,\n      [ 'kvm', 'joyent', 'lx' ]\n    ]\n  };\n\n  var _json_disk_rules = {\n    'boot': [\n      'boolean',\n      false,\n      [ 'kvm' ]\n    ],\n    'image_uuid': [\n      'string',\n      null,\n      [ 'kvm' ]\n    ],\n    'size': [\n      'integer',\n      null,\n      [ 'kvm' ]\n    ],\n    'image_size': [\n      'integer',\n      null,\n      [ 'kvm' ]\n    ],\n    'model': [\n      'string',\n      null,\n      [ 'kvm' ]\n    ],\n    'compression': [\n      'string',\n      null,\n      [ 'kvm' ]\n    ]\n  };\n\n  var _json_filesystem_rules = {\n    'type': [\n      'string',\n      'lofs',\n      [ 'joyent' ]\n    ],\n    'source': [\n      'string',\n      null,\n      [ 'joyent' ]\n    ],\n    'target': [\n      'string',\n      null,\n      [ 'joyent' ]\n    ]\n  };\n\n  function getOptionValue(name) {\n    return getPropertyValue(_options, _json_option_rules, name);\n  }\n\n  function getPropertyValue(object, rules, name) {\n    var value = null;\n\n    if (object.hasOwnProperty(name)) {\n      value = object[name];\n\n      if (typeof(value) === 'string' && value.length === 0) {\n        value = null;\n      }\n    }\n\n    if (rules[name]) {\n      var field_info = rules[name];\n\n      if (value === null) {\n        if (field_info[1] !== null) {\n          if (typeof(field_info[1]) === 'function') {\n            value = field_info[1](object, rules);\n          } else {\n            value = field_info[1];\n          }\n        }\n      } else {\n        switch (field_info[0]) {\n          case 'boolean':\n            value = !!value;\n          break;\n          case 'integer':\n            value = parseInt(value);\n            if (!value) {\n              value = 0;\n            }\n          break;\n          case 'array':\n            value = value.toString().split(/[\\s,]+/);\n            if (!value) {\n              value = null;\n            }\n          break;\n          default:\n            value = value.toString();\n        }\n      }\n    }\n\n    return value;\n  }\n\n  this.setOption = function(name, value) {\n    _options[name] = value;\n\n    return this;\n  };\n\n  this.setOptions = function(obj) {\n    var prop;\n\n    for (prop in obj) {\n      if (obj.hasOwnProperty(prop)) {\n        this.setOption(prop, obj[prop]);\n      }\n    }\n\n    return this;\n  };\n\n  this.setNics = function(nics) {\n    var i;\n\n    _nics.length = 0;\n\n    for (i in nics) {\n      _nics.push(nics[i]);\n    }\n  };\n\n  this.setFilesystems = function(filesystems) {\n    var i;\n\n    _filesystems.length = 0;\n\n    for (i in filesystems) {\n      _filesystems.push(filesystems[i]);\n    }\n  };\n\n  this.setDisks = function(disks) {\n    var i;\n\n    _disks.length = 0;\n\n    // add system disk from dataset for kvm\n    if (brand === 'kvm') {\n      if (_dataset.manifest.image_size && _dataset.manifest.disk_driver) {\n        _disks.push({\n          'boot': true,\n          'model': _dataset.manifest.disk_driver,\n          'image_size': _dataset.manifest.image_size,\n          'image_uuid': _dataset.uuid\n        });\n      }\n    }\n\n    for (i in disks) {\n      _disks.push(disks[i]);\n    }\n  };\n\n  this.setMetadata = function(metadata) {\n    var i;\n\n    _metadata.length = 0;\n\n    for (i in metadata) {\n      _metadata.push(metadata[i]);\n    }\n  };\n\n  this.generate = function() {\n    var json = {};\n    var name, i, len;\n\n    json['brand'] = brand;\n\n    // add simple options\n    for (name in _json_option_rules) {\n      var field_info = _json_option_rules[name];\n\n      if (field_info[2].indexOf(brand) >= 0) {\n        var value = getOptionValue(name);\n\n        if (value !== null) {\n          json[name] = value;\n        }\n      }\n    }\n\n    // add nics\n    if (_nics.length > 0) {\n      json.nics = [];\n\n      for (i = 0, len = _nics.length; i < len; i++) {\n        var item = {};\n\n        for (name in _json_nic_rules) {\n          var field_info = _json_nic_rules[name];\n\n          if (field_info[2].indexOf(brand) >= 0) {\n            var value = getPropertyValue(_nics[i], _json_nic_rules, name);\n\n            if (value !== null) {\n              item[name] = value;\n            }\n          }\n        }\n\n        json.nics.push(item);\n      }\n    }\n\n    // add disks\n    if (_disks.length > 0) {\n      json.disks = [];\n\n      for (i = 0, len = _disks.length; i < len; i++) {\n        var item = {};\n\n        for (name in _json_disk_rules) {\n          var field_info = _json_disk_rules[name];\n\n          if (field_info[2].indexOf(brand) >= 0) {\n            var value = getPropertyValue(_disks[i], _json_disk_rules, name);\n\n            if (value !== null) {\n              item[name] = value;\n            }\n          }\n        }\n\n        json.disks.push(item);\n      }\n    }\n\n    // add filesystems\n    if (_filesystems.length > 0) {\n      json.filesystems = [];\n\n      for (i = 0, len = _filesystems.length; i < len; i++) {\n        var item = {};\n\n        for (name in _json_filesystem_rules) {\n          var field_info = _json_filesystem_rules[name];\n\n          if (field_info[2].indexOf(brand) >= 0) {\n            var value = getPropertyValue(_filesystems[i], _json_filesystem_rules, name);\n\n            if (value !== null) {\n              item[name] = value;\n            }\n          }\n        }\n\n        json.filesystems.push(item);\n      }\n    }\n\n    // add metadata\n    if (_metadata.length > 0) {\n      json.customer_metadata = {};\n      json.internal_metadata = {};\n\n      for (i = 0, len = _metadata.length; i < len; i++) {\n        if (_metadata[i].name.match(/_pw$/)) {\n          json.internal_metadata[_metadata[i].name] = _metadata[i].value;\n        }\n\n        json.customer_metadata[_metadata[i].name] = _metadata[i].value;\n      }\n    }\n\n    return json;\n  };\n}\n","'use strict';\n\nangular.module('dsapi.services', [], ['$provide', function($provide) {\n  $provide.factory('dsapiDatasets', ['$http', '$q', function($http, $q) {\n    var datasets = new DatasetList();\n    var deferred = $q.defer();\n    var service = {\n      count: function() {\n        return datasets.count();\n      },\n      all: function() {\n        return datasets.all();\n      },\n      latest: function() {\n        return datasets.latest();\n      },\n      get: function(index) {\n        return datasets.get(index);\n      },\n      by_uuid: function(uuid) {\n        return datasets.get_by_uuid(uuid);\n      }\n    };\n\n    /* initialize datasets list */\n    $http.get('/images')\n      .success(function(data) {\n        datasets.pushMany(data);\n\n        /* resolve service instance */\n        deferred.resolve(service);\n      })\n      .error(function(data, status, headers, config) {\n        if (status == 404) {\n          $http.get('/images')\n          .success(function(data) {\n            datasets.pushMany(data);\n\n            /* resolve service instance */\n            deferred.resolve(service);\n          });\n        } else {\n          /* reject service instance */\n          deferred.reject('Error loading datasets list.');\n        }\n      });\n\n    return deferred.promise;\n  }]);\n}]);\n"]}